/3.2
(ODB.1
	Dependencies:	"$USEREXT/gia_ordner.avx\n$USEREXT/gia_sedit.avx\n"
	FirstRootClassName:	"Project"
	Roots:	2
	Version:	32
)

(Project.2
	Name:	"getscripts.apr"
	CreationDate:	"Freitag, 12. Dezember 2008 16:00:47"
	GUIName:	"Project"
	Win:	3
	CSMgr:	4
	DocExts:	5
	VisGUIWidth:	70
	Doc:	6
	Doc:	10
	Doc:	14
	Doc:	18
	Doc:	23
	Doc:	27
	Doc:	31
	Doc:	35
	Doc:	40
	Doc:	45
	Doc:	49
	Doc:	53
	Doc:	57
	Doc:	61
	Doc:	66
	Doc:	70
	Doc:	74
	Doc:	78
	Doc:	82
	Doc:	86
	Doc:	90
	Doc:	94
	Buttons:	99
	Buttons:	100
	Buttons:	101
	Dependencies:	102
	Dependencies:	103
	Scripts:	104
	Prefs:	105
	GUI:	883
	WorkDir:	978
	WinX:	436
	WinY:	-10
	WinW:	1353
	WinH:	1105
	SerialNumber:	"825911104042"
	GUINames:	979
	GUINames:	980
	GUINames:	981
	GUINames:	982
	GUINames:	983
	GUINames:	984
	GUINames:	985
	TocWidthScale:	1.00000000000000
)

(DocWin.3
	Owner:	2
	Open:	1
	X:	4
	Y:	3
	W:	368
	H:	460
)

(CSMgr.4
)

(DocAct.5
	Doc:	2
)

(SEd.6
	Name:	"AppFile.Get"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	7
	CSMgr:	8
	DocExts:	9
	Source:	"' Name : AppFile.Get\n' Erzeugen des \"lokalen\" FN\n' für eine beliebige Anwendungsdatei der Applikation\n\n' -------------------------------------\n' App-Struktur:  APP_Pfad/\n'                        /AV\n'                        /AV/Projects\n'  Bsp \"aktives Projekt\" /AV/Projects/BSP.apr\n'                        /AV/Legends\n'                         ...\n'                         ...\n'                        /Vorlagen\n'  Bsp \"lineDoc\"         /Vorlagen/BSP.HTM\n'******** +++++++\n'                            (1)    
 (0)\n' -------------------------------------\n\n'\n' PARAMETER : (0) :\"reiner Dateiname\"\n'             (1) : relativer Pfad innerhalb der Applikation\n\n' AUSGABE   :  Absoluter Pfad zur Datei\n\ndateiName = self.get(0)\nteilVerz  = self.get(1)\n\nproPath      = av.getProject.getFileName\nappPath      = propath.returnDir.returnDir.asstring\nvorlagenPfad = appPath+\"/\"+teilVerz\n\ncheckedFN    = FileName.Make(vorlagenPfad + \"/\" +dateiName)\n\nif (file.exists(checkedFN).Not) then\n ' Abbruch\n   return NIL\nend\n\nreturn checkedFN
\n\n\n\n\n"
)

(DocWin.7
	Owner:	6
	X:	5
	Y:	5
	W:	363
	H:	256
)

(CSMgr.8
)

(DocAct.9
	Doc:	6
)

(SEd.10
	Name:	"Application.ServerParameters"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	11
	CSMgr:	12
	DocExts:	13
	Source:	"' Name: Application.ServerParameters\n' MODIFY this file.\n' Comment the leading MSGBOX and RETURN.\n\n  txt = \"BREAK. You need a LOCAL version of this script in Your APR!\"\n  txt = txt + nl + \"LOAD and MODIFY this file as a template !\"\nmsgbox.info(txt,\"Application.ServerParameters\")\nreturn NIL\n\n' 1.\n  serverDomains = {}\n  serverDomains.add(\"ir0128\")\n  serverDomains.add(\"145.253.133.77\")\n  serverDomains.add(\"172.19.117.101\")\n\n' 2.\n  serverIDs = {}\n  serverIDs.add(\"KML_test\")\n  serverIDs.add(\"AXL_test\")\nserverIDs
.add(\"HTM_test\")\n\n  serverParameter = dictionary.make(3)\n  serverParameter.add(\"domains\",serverdomains)\n  serverParameter.add(\"servids\"    ,serverIDs)\n\n\nreturn serverParameter\n\n"
)

(DocWin.11
	Owner:	10
	X:	20
	Y:	20
	W:	363
	H:	256
)

(CSMgr.12
)

(DocAct.13
	Doc:	10
)

(SEd.14
	Name:	"Application.URLParameters"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	15
	CSMgr:	16
	DocExts:	17
	Source:	"' Name: Application.URLParameters\n' MODIFY this file.\n' Comment the leading MSG and RETURN.\n\n  txt = \"BREAK. Create a Local version of this script in Your APR!\"\n  txt = txt + nl + \"LOAD and MODIFY this file as a template !\"\nmsgbox.info(txt,\"Application.URLParameters\")\nreturn NIL\n\n\n  parList={}\n  parList.add(\"PAR1\")\n  parList.add(\"PAR2\")\n  parList.add(\"PAR3\")\n\nreturn parList\n"
)

(DocWin.15
	Owner:	14
	X:	35
	Y:	35
	W:	363
	H:	256
)

(CSMgr.16
)

(DocAct.17
	Doc:	14
)

(SEd.18
	Name:	"Get.AnyDoc"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	19
	CSMgr:	20
	DocExts:	21
	ObjectTag:	22
	Source:	"' Name: Get.AnyDoc     : Mon Jan 18 10:18:25 2016 : getscripts.apr\n' AV überträgt ein beliebiges Dokument\n' aus dem Vorlagen-DEPOT an den Client\n' Übertragungs-weg entsprechend \"_responseMode\"\n\n  URLS    = self\n  updList = {}\n\n  docName  = URLS.get(\"srcDoc\")\n  if (docName = NIL) then\n    av.run(\"Put.Meldung\",{\"NOT supplied CMD-parameter : 'srcDoc'\"})\n    return NIL\n  end\n\n  srcFN   = av.run(\"AppFile.Get\",{docName, \"vorlagen\"})\n  if (srcFN = NIL) then\n    av.run(\"Put.Meldung\",{\"required srcDoc \"+docName+\" no
t found\"})\n    return NIL\n  end\n\n' 1. Vorbereiten\n  srcArray = av.run(\"LineDoc.Transform2Array\",{srcFN,updList})\n\n' 2. Ausgeben\n  if (_responseMode=\"HTM\") then\n    av.Run(\"Put.HTMDirect\",{srcArray})\n  else\n    cacheID = av.Run(\"LineDoc.Array2Cache\",{docName, srcArray})\n    av.Run(\"Put.Cache\",{cacheID, docName})\n  end\n\n"
	SearchStr:	"\n"
)

(DocWin.19
	Owner:	18
	X:	74
	Y:	391
	W:	806
	H:	558
)

(CSMgr.20
)

(DocAct.21
	Doc:	18
)

(Nil.22
)

(SEd.23
	Name:	"LineDoc.Transform2Array"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	24
	CSMgr:	25
	DocExts:	26
	ObjectTag:	22
	Source:	"' Name: LineDoc.Transform2Array     : Mon Jan 18 10:17:11 2016 : getscripts.apr\n\n  srcFN = self.get(0)\n  colli = self.get(1)\n\n' TEIL 1:\n  ' VORLAGE-Datei laden\n\n  if (srcFN <> NIL) then\n    if (srcFN.is(String)) then srcFN = srcFN.asFileName end\n    fileIn = lineFile.Make(srcFN, #FILE_PERM_READ)\n    if (fileIn=NIL) then  return NIL  end\n  else\n    return NIL\n  end\n\n\n' TEIL 2:\n  '  Aktualisierung der Variablen im VorlageDokument\n  '  durch zeilenweises Ersetzen von Platzhaltern\n  '  In jeder Zeile werden all
e Elemente der UPDATE-Liste geprüft!\n\n  lineArray = {}\n  done = FALSE\n  WHILE (done.not)\n   theLine = fileIn.readElt\n\n   if (theLine <> NIL) then\n\n     FOR each paar in colli\n      von  = paar.get(0).asstring\n      nach = paar.get(1)\n      if (theLine.Contains(von)) then\n        IF (nach<>NIL) then\n          nach    = nach.asString\n          theLine = theLine.Substitute(von, nach)\n        END\n      end\n     END\n\n     lineArray.add(theLine)\n   ' *********************\n\n   else\n     done = TRUE\n   end\n  END\nfi
leIn.Close\n\nreturn lineArray\n\n"
	SearchStr:	"\n"
)

(DocWin.24
	Owner:	23
	X:	431
	Y:	120
	W:	818
	H:	805
)

(CSMgr.25
)

(DocAct.26
	Doc:	23
)

(SEd.27
	Name:	"MSG.Reporting"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	28
	CSMgr:	29
	DocExts:	30
	Source:	"' Name : MSG.Reporting\n' MODUS für AV-Fehlermitteilungen umschalten\n\n\nif (MsgBox.GetErrorReporting.not) then\n  MsgBox.SetErrorReporting(true)\n  if (MsgBox.YesNo(\"REPORTING wieder aktivieren ?\",\"ERROR-REPORTING\",true)) then\n    MsgBox.SetErrorReporting(true)\n  else\n    MsgBox.SetErrorReporting(false)\n  end\nelse\n  if (MsgBox.YesNo(\"REPORTING ausschalten?\",\"ERROR-REPORTING\",true)) then\n    MsgBox.SetErrorReporting(false)\n  else\n    MsgBox.SetErrorReporting(true)\n  end\nend\n\n"
)

(DocWin.28
	Owner:	27
	X:	80
	Y:	80
	W:	363
	H:	256
)

(CSMgr.29
)

(DocAct.30
	Doc:	27
)

(SEd.31
	Name:	"Put.Meldung"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	32
	CSMgr:	33
	DocExts:	34
	Source:	"'Name : Put.Meldung\n'Rückgabe einer Kurzinformation  (1 Zeile) an den Browser\n\nsrcSrciptName = NIL\n\nif (self<>NIL) then\n  alertTXT      = self.get(0)\n  if (self.count>1)  then srcSrciptName = self.get(1)  end\nelse\n  _wmsFormat = \"HTM\"\n  alertTXT   = \"test-alert\"\n\nend\n\n  alertSRC = \"WMS-Alert\"\n  lineArray = {}\n\n' FORMAT\n' ------\nif     (_wmsFormat = \"KML\") then\n  ' Google-earth\n  lineArray.add(\"<?xml version=\"+\"1.0\".quote+\" encoding=\"+\"UTF-8\".quote+\"?>\")\n  lineArray.add(\"<kml xmlns=\"+\"http://earth.google.com
/kml/2.0\".quote+\">\")\n  lineArray.add(\"<folder>\")\n  lineArray.add(\"<name>\"+alertSRC+\"</name>\")\n  lineArray.add(\"<description>\"+alertTxt+\"</description>\")\n  lineArray.add(\"<visibility>0</visibility>\")\n  lineArray.add(\"<open>1</open>\")\n  lineArray.add(\"</folder>\")\n  lineArray.add(\"</kml>\")\n\nelseif (_wmsFormat = \"AXL\") then\n\n\nelseif (_wmsFormat = \"WXL\") then\n\n\nelse\n  ' HTM (Standard)\n  lineArray.add(\"<html><head>\" )\n  lineArray.add(\"</head><body bgcolor=#FFFF00> <center>\" )\n  lineArray.add(\"<font face=\"\"Verdana
,Arial\"\" size=\"\"-1\"\">\"   )\n  if (srcSrciptName<>NIL) then  alertSRC = alertSRC+\"(\"+srcSrciptName+\")\"  end\n  lineArray.add(alertSRC+\" : \"+alertTXT)\n  lineArray.add(\"</font>\"   )\n\n    ' Folgender ABSCHNITT dient nur dem Rückschalten\n    ' zur STANDARD-Fußzeile in dynamischen IIMAPS-Anwendungen\n     if (false) then\n      lineArray.add(\"<script language=\"\"JavaScript\"\">\" )\n      lineArray.add(\"var mapSite   = parent.mapSite\" )\n      lineArray.add(\"function goBack() { this.location.href=mapSite+\"\"foot/fussnote.ht
ml\"\"}\" )\n      lineArray.add(\"window.setTimeout(\"\"goBack()\"\",3000);\" )\n      lineArray.add(\"</script>\" )\n     end\n  lineArray.add(\"</body></html>\" )\nend\n\n' AUSGABEMODE\n' -----------\n  if     (_responseMode=\"URL\") then\n    docname = \"alert.htm\"\n    cacheID = av.Run(\"LineDoc.Array2Cache\",{docname, lineArray})\n    av.run(\"Put.Cache\",{cacheID, docname})\n    exit\n  else\n    av.run(\"Put.HTMDirect\",{lineArray})\n  ' **********************************\n  end\n\n\n"
)

(DocWin.32
	Owner:	31
	X:	450
	Y:	80
	W:	777
	H:	611
)

(CSMgr.33
)

(DocAct.34
	Doc:	31
)

(SEd.35
	Name:	"SED.Get"
	CreationDate:	"Freitag, 12. Dezember 2008 16:00:51"
	GUIName:	"Script"
	Win:	36
	CSMgr:	37
	DocExts:	38
	ObjectTag:	39
	Source:	"' Name: SED.Get     : Tue Jan 19 18:34:45 2016 : getscripts.apr\n' Derived from \n' ==============================\n' odb.extract.script usage note:\n' ==============================\n\n' Avenue code can be extracted from .apr's and .avx's (Projects and Extensions) \n' using the California Department of Fish and Game / Information Technology Branch's\n' 'odb.extract.script' utility.  This utility is meant to encourage the sharing of code and\n' knowledge.  Please, do not extract and use code without due credit to th
e author(s) and\n' please, do not extract or utilize copyrighted code without the consent of the author(s).\n\n' Author: Isaac Oshima\n' California Department of Fish and Game, Information Technology Branch\n' July 12, 1999\n' ioshima@maphost.dfg.ca.gov\n' 916-323-1635\n\n' odb.extract.script author: Isaac Oshima, ioshima@maphost.dfg.ca.gov; 199907.12\n' ==============================\n' odb.extract.script usage note:\n' ==============================\n\ntheProject = av.GetProject\n\nsedIdents  = dictionary.make(3)\n\n' Prom
pt user to find the apr or avx that he/she wishes to extract script(s).\n\nFileList = FileDialog.ReturnFiles({\"*.avx\",\"*.apr\"},{\"Extension (*.avx)\", \"Project (*.apr)\"},\"Search ODB for Scripts\",0)\n\n' If user cancelled\nif (FileList.Count = 0) then\n    System.Beep\n    Return Nil\nend\n\n'if user selected more than one file (this version will only extract from one apr or avx at a time)\n'if (FileList.Count > 1) then\n'    MsgBox.Error(\"Please, select ONE input-file (APR,AVX)\",\"Aborting\")\n'    Return Nil\n'end\n'odbFilen
ame = FileList.Get(0)\n\n' Cycle through selected odb-files \n\nlogList = {}\n    \nfor each odbFilename in FileList\n\n    odbName     = odbFilename.getBaseName\n    dirFileName = odbFilename.returnDir\n    dirFileName.mergeFile(\"ave\")\n\n    ' 1. ScriptList\n\n    sedColl = av.run(\"SED.getListSed\",{odbFileName})\n\n    if (sedColl.count>0) then\n\n        sedKeys = sedColl.returnKeys \n        sedKeys.sort(true)\n\n        sedFNset= {}\n        'keyList = sedKeys\n        keyList = Msgbox.MultiListAsString(sedKeys,\"Select Scrip
t(s) to Extract\",\"Script Extractor\")\n\n        if (keyList.is(list)) then  \n\n            for each sedKey in keyList\n\n                if (sedKey.left(3)=\"xxx\") then continue end\n\n                startLine = sedColl.get(sedKey)\n\n                sedIdent = av.run(\"SED.save\",{odbFileName, sedKey, startLine, dirFileName})    \n                \n                if (sedIdent=NIL) then\n                  msgbox.info(\"broken SED-saving:\" + sedKey, \"ALERT\")\n                  break ' return NIL  \n                end \n    
                   \n                sedIdents.set(sedIdent.get(\"name\"), sedIdent)\n\n            end\n\n        end    \n\n    end\n\n\n    ' 2. Extensions (dependencies)\n\n    depList = av.run(\"SED.getListExt\",{odbFileName})\n\n    if (depList.count>0) then \n        depIdent = Msgbox.ListAsString(depList,\"Select an extension to View\",\"Script Extractor\")\n    end\n\n    ' 3.\n\n    logDir = av.run(\"SED.log\", {odbName, sedIdents, depList, dirFileName})\n    \n    if (logDir <> NIL) then\n      logList.add(odbName)\n    end \n    
\nend\n\nif (logList.count > 0) then  \n  logDir = Msgbox.ListAsString(logList,\"Select a logged directory!\",\"Script Extractor\")\nend\n"
	SearchStr:	"\n"
	FontSize:	1
)

(DocWin.36
	Owner:	35
	X:	95
	Y:	14
	W:	907
	H:	964
)

(CSMgr.37
)

(DocAct.38
	Doc:	35
)

(Nil.39
)

(SEd.40
	Name:	"SED.getListExt"
	CreationDate:	"Montag, 18. Januar 2016 13:09:09"
	GUIName:	"Script"
	Win:	41
	CSMgr:	42
	DocExts:	43
	ObjectTag:	44
	Source:	"' Name: SED.getListExt     : Mon Jan 18 14:20:10 2016 : getscripts.apr\n\n  extNames = {}\n\n  odbFileName = self.get(0)\n\n  qString     = \"Dependencies\"\n  qStringLen  = qString.count\n  \n  odbFile = LineFile.Make(odbFilename,#FILE_PERM_READ)\n\n  lineCount = odbFile.GetSize    \n\n  nxtname = FALSE\n  nxtdate = FALSE \n  qt = (34).asChar ' 34 = ascii(\") \n\n	 for each i in 0..(lineCount - 1)\n	    \n	    inLine = odbFile.ReadElt.Trim  \n	       \n	    if (inLine.Trim.Left(qStringLen) = qString) then  \n	      \n       extName
sString = inLine.Trim.asTokens(qt).Get(1).substitute(\"\\n\",\"\\\") \n       \n       extNames = extNamesString.asTokens(\"\\\") \n       BREAK\n	    end    \n	 end\n\n		odbFile.Close\n\nreturn extNames\n"
	SearchStr:	"\n"
	FontSize:	1
)

(DocWin.41
	Owner:	40
	X:	231
	W:	890
	H:	734
)

(CSMgr.42
)

(DocAct.43
	Doc:	40
)

(Nil.44
)

(SEd.45
	Name:	"SED.getListSed"
	CreationDate:	"Montag, 18. Januar 2016 12:40:15"
	GUIName:	"Script"
	Win:	46
	CSMgr:	47
	DocExts:	48
	ObjectTag:	44
	Source:	"' Name: SED.getListSed     : Mon Jan 18 15:53:38 2016 : getscripts.apr\n\n  scriptColl = Dictionary.make(3)\n\n  odbFileName = self.get(0)\n\n  odbExt = odbFilename.getExtension  \n  if (odbExt = \"avx\") then\n    qString = \"(Script.\"\n  else \n    qString = \"(SEd.\"\n  end  \n  qStringLen = qString.count\n\nodbFile = LineFile.Make(odbFilename,#FILE_PERM_READ)\naprLineCount = odbFile.GetSize    \n\n' read thru the odbFile and retrieve all the\n' \"Script.\"(\"SEd.\") object names and their positions in\n' the extension.\n\n  nxtname 
= FALSE\n  nxtdate = FALSE \n  qt = (34).asChar ' 34 = ascii(\") ' qt = \":\"\n\n	 for each i in 0..(aprLineCount - 1)\n	    \n	    inLine = odbFile.ReadElt.Trim  \n	       \n	    if (inLine.Left(qStringLen) = qString) then  \n	      nxtName = TRUE\n       outLine = \"\" \n       iStart = i.asString.Trim\n	    end\n	  \n	    if (nxtName = TRUE) then\n	      if (inLine.Trim.Left(5) = \"Name:\") then  \n	        SedName = (inLine.Trim.asTokens(qt).Get(1))  ' .Trim.Substitute(qt,\"\")        \n         outLine = SedName ' + \":\" + i.asS
tring.Trim)  \n         if (qString=\"(Script.\") then  	 \n           scriptColl.set(outLine, iStart)\n         else\n           nxtdate = TRUE 	 \n         end  \n	        nxtname = FALSE\n       end\n	    end    \n\n	    if (nxtdate = TRUE) then\n	      if (inLine.Trim.Left(13) = \"CreationDate:\") then  \n	        CreaDate = (inLine.Trim.asTokens(qt).Get(1)) ' .Trim.Substitute(qt,\"\")        \n	        outLine = outLine + \":\" + CreaDate.quote\n	        scriptColl.set(outLine, iStart) \n\n	        nxtdate = FALSE\n         ou
tLine = \"\" \n	      end\n	    end \n	 end\n\n		odbFile.Close\n\n	' if no script objects were found\n	if (scriptColl.Count = 0) then\n	    MsgBox.Error(\"No scripts contained within:\" ++ odbFileName.asstring,\"Aborting\")\n	    Return Nil\n	end\n\nreturn scriptColl\n"
	SearchStr:	"\n"
	FontSize:	1
)

(DocWin.46
	Owner:	45
	X:	260
	Y:	120
	W:	800
	H:	899
)

(CSMgr.47
)

(DocAct.48
	Doc:	45
)

(SEd.49
	Name:	"SED.log"
	CreationDate:	"Dienstag, 19. Januar 2016 12:39:07"
	GUIName:	"Script"
	Win:	50
	CSMgr:	51
	DocExts:	52
	ObjectTag:	39
	Source:	"' Name: SED.log     : Tue Jan 19 18:30:51 2016 : getscripts.apr\n'   \n  SedName  = \"\"\n  avxFNset = {}\n  saveDir  = NIL\n  version  = \"0.0.1\"\n  description = \"extracted out of av3-document\"\n  \n  if (self.is(list)) then \n    _sedsave = self.clone\n    ' return NIL \n  end\n\n' Evaluate parameters \n    \n  sedName   = _sedsave.get(0)\n  sedIdents = _sedsave.get(1)\n  if (_sedsave.count > 2) then  avxFNset = _sedsave.get(2) end\n  if (_sedsave.count > 3) then  saveDir = _sedsave.get(3) end\n  \n  if (saveDir=NIL) then  \n  
' saveDir = sedFNset.get(0).returnDir\n  end\n\n  logFN = saveDir.clone\n  logFN.mergeFile(sedName)\n  ' logFN = saveDir.clone\n  logFN.mergeFile(\"av3.json\")\n  \n  logFile = LineFile.Make(logFN,#FILE_PERM_WRITE)\n  \n  logFile.WriteElt(\"{ \")\n\n' 1. Stammdaten   \n  logFile.WriteElt(\"name\".quote        + \":\" + sedName.quote + \",\")\n  logFile.WriteElt(\"version\".quote     + \":\" + version.quote + \",\")\n  logFile.WriteElt(\"description\".quote + \":\" + description.quote + \",\")\n  \n' 2. \n  logFile.WriteElt(\"scripts\".quote+ \": {\")
\n  logLine = NIL\n  sedNames = sedIdents.returnKeys\n  for each sedN in sedNames\n    if (logLine<>NIL) then  \n      logFile.WriteElt(logLine + \",\")  \n    end\n    \n    sedIdent = sedIdents.get(sedN)\n    sedKey   = sedIdent.get(\"name\")\n    if (sedKey=NIL) then sedKey = sedN end\n    logLine = sedKey.asstring.substitute(\"\\\",\"/\").quote + \":\" + sedIdent.get(\"date\").quote ' *** UNIFY path-slash as \"/\"\n  end \n  if (logLine<>NIL) then logFile.WriteElt(logLine) end\n  logFile.WriteElt(\"},\")\n\n' 3.   \n  logFile.WriteElt(\"
dependencies\".quote + \": [\")\n  logLine = NIL\n  for each avxFN in avxFNset\n    if (logLine<>NIL) then  logFile.WriteElt(logLine + \",\")  end\n    logLine = avxFN.asstring.substitute(\"\\\",\"/\").quote \n  end \n  if (logLine<>NIL) then logFile.WriteElt(logLine) end\n  logFile.WriteElt(\"]\")\n\n\n  logFile.WriteElt(\"}\")\n  \n  logFile.close  \n  \nreturn saveDir\n\n\n  \n  \n\n  \n    \n\n  "
	SearchStr:	"\n"
	FontSize:	1
)

(DocWin.50
	Owner:	49
	X:	369
	Y:	15
	W:	940
	H:	924
)

(CSMgr.51
)

(DocAct.52
	Doc:	49
)

(SEd.53
	Name:	"SED.save"
	CreationDate:	"Montag, 18. Januar 2016 12:44:26"
	GUIName:	"Script"
	Win:	54
	CSMgr:	55
	DocExts:	56
	ObjectTag:	39
	Source:	"' Name: SED.save     : Tue Jan 19 18:05:32 2016 : getscripts.apr\n'   \n  sedIdent = dictionary.make(3)\n  sedIdent.set(\"date\",\"nn\")\n  \n  saveDir = NIL\n  qt = (34).asChar  ' char (\")\n\n  skipKeys = {\"GUIName\",\"Win\", \"CSMgr\", \"DocExts\", \"SearchStr\", \"FontSize\"} ' \"CreationDate\",\n\n  if (self.is(list)) then \n    _sedsave = self.clone\n    ' return NIL \n  end\n\n' Evaluate parameters \n    \n  odbFileName     = _sedsave.get(0)\n  scriptString    = _sedsave.get(1)\n  scriptPosition  = _sedsave.get(2)\n  if (_sedsave.count>3
) then saveDir = _sedsave.get(3) end  \n\n  \n  odbFile   = LineFile.Make(odbFilename,#FILE_PERM_READ)\n  lineCount = odbFile.GetSize    \n  odbName   = odbFilename.getBaseName\n  odbExt    = odbFilename.getExtension  \n\n  ' get the script name, position in the avx and init the output script name\n\n  scriptIdent = scriptString.Trim.asTokens(\":\")\n  scriptName  = scriptIdent.Get(0).Trim\n  scriptFile  = scriptName + \".ave\"   \n  \n  if (scriptIdent.count>1) then \n    scriptDate = scriptIdent.Get(1).Trim\n  end    \n\n  if 
(saveDir=NIL) then     \n   ' ask user if he/she would like to add the script to the current project\n    answer = Msgbox.YesNo(\"Add script to this Project?\", ScriptName.Trim, TRUE)\n    if (answer.not) then return nil  end\n    ' prompt user for output script name\n    sedFilename = FileDialog.Put(scriptFile.asFilename, \"*.ave\",\"Output Script\")\n    if (sedFilename = Nil) then  ' if user cancelled\n      odbFile.Close\n      ' Msgbox.Error(\"User Cancelled\",\"Aborting\")\n      Return Nil\n    end    \n  end\n\n' Prepare 
save-file-system \n\n  av.run(\"Ordner.Create\",{saveDir.asstring})\n\n  sedDir = saveDir.asstring+\"/\"+odbName\n  av.run(\"Ordner.Create\",{sedDir})\n    \n' make output script file\n\n  sedFileName = sedDir.asFileName\n  sedFileName.mergeFile(scriptFile)\n\n 'sedIdent.set(\"fn\", sedFilename)\n  sedIdent.set(\"fn\", scriptFile)\n\n  sedFile = LineFile.Make(sedFilename,#FILE_PERM_WRITE)\n  \n  if (odbExt = \"avx\") then\n    odbKey    = \"(Script.\"\n    sourceKey = \"SourceCode\"\n  else \n    odbKey    = \"(SEd.\"\n    sourceKey = \"Source\"\n  
end  \n    \n' set the avx file position to the start of the\n' user selected script and calculate the end position\n\n  scriptPosition = scriptPosition.asNumber\n  \n  odbFile.SetPos(scriptPosition)\n \n  endPosition = (lineCount - scriptPosition) ' ???? zur Sicherheit\n  \n  ' msgbox.info(\"start=\"+scriptPosition.asstring, \"end=\"+endPosition.asstring)\n  \n  theChar = \"\"\n  outLine = \"\"\n  codeFound = false\n  \n \n' read thru the odb-section and retrieve the script code\n\n  for each i in 0..(endPosition - 1)\n    \n    ' read
 a line from the odb-file(apr or avx)\n    \n    inLine = odbFile.ReadElt  ' .Trim \n     \n    ' *** FINALE line of odb-object ***\n    ' determine if this is the END of the script object\n    if ((inLine.Count = 1) and (inLine = \")\")) then   \n      if (outLine.count > 0)then\n        if (outLine.right(1) = qt) then \n          outLine = outline.left(outline.count-1) \n        end   \n        ' msgbox.report(outline, \"Final write\")\n        av.run(\"SED.write\", {sedFile, outLine}) ' sedFile.WriteElt(outLine.Right(outL
ine.Count - 1))\n      end\n\n      sedFile.SetPos(0)\n      odbFile.Close\n      sedFile.Close         \n      \n      if (scriptDate<>NIL) then \n        sedIdent.set(\"date\", scriptDate)\n        _x = sedIdent\n      end   \n     \n      return sedIdent               \n    end\n  \n    \n    ' search for start of avx script object    \n    if (inLine.Trim.Left(odbKey.count) = odbKey) then\n      inLine = \"\"\n      continue\n    end\n\n    ' msgbox.report(inline, \"line \"+i.asstring)\n  \n    if (inLine.Trim.asTokens(\":\").count > 
0) then \n      lineKey = inLine.Trim.asTokens(\":\").get(0)\n    else \n      lineKey = NIL\n    end\n\n    if (skipKeys.FindByValue(lineKey) > -1) then  \n      continue\n    end  \n    \n    ' search for script object's name property\n    \n    if (lineKey = \"Name\") then\n      \n      SedName = inLine.Trim.asTokens(\":\").Get(1).Trim.Substitute(qt,\"\")      \n     'av.run(\"SED.savecomment\", {sedFile, odbFile, sedName}) \n      sedIdent.set(\"name\", sedName)\n      \n      inLine = \"\"\n      continue\n    end\n\n    if (lineKey = \"
CreationDate\") then\n     \n      scriptDate = inLine.Trim.asTokens(\":\").Get(1).Trim.Substitute(qt,\"\")\n      \n      inLine = \"\"\n      continue\n    end\n\n    ' msgbox.report(\"lineKey=\"+lineKey, \"at \"+i.asstring+\"::\"+codeFound.asstring)\n    \n    if (lineKey = sourceKey) then   \n      ' remove lineKey + (:)\n      inLine = inLine.Right(inLine.Count - (lineKey.count+1))\n\n      ' remove leading (\")\n      inLine = inLine.trim.middle(inLine.indexOf(qt)+1, inLine.Count) \n         \n      codeFound = true\n\n    elseif (co
deFound.not) then \n      continue\n    end\n\n    ' msgbox.report(inLine, \"line:\" + (scriptPosition+i).asstring)\n    ' if the avx line contains a newline character\n    ' parse thru and retain the next part for append \n    ' to the next line\n    \n    if (inLine.Contains(\"\\n\")) then\n      \n      skipChar = false\n  \n      for each j in 0..(inLine.Count - 1)\n       \n        if (skipChar = true) then \n          skipChar = false\n          continue  \n        end\n          \n        theChar = inLine.Middle(j,1)\n       
 nxtLine = inLine.Middle(j,2)\n  \n        if (nxtLine = \"\\n\") then\n          ' write actual outline and start next \n          ' if (outLine.trim.count > 0) then  ' remove empty lines \n            writeFlag = true   ' MsgBox.YesNoCancel (outline, \"writing count=\"+outline.count.asstring, true)\n            if (writeflag=NIL) then  return nil  end\n            if (writeflag) then  \n              av.run(\"SED.write\", {sedFile, outLine}) ' sedFile.WriteElt(outLine.Right(outLine.Count - 1))\n            end\n          
' end\n          outLine  = \"\"\n          skipChar = true\n          continue\n        end\n                  \n        ' if the character is a \"literal\" then strip the literal\n        ' marker and use the next character \"literally\".\n            \n        if (theChar = \"\\\") then\n          if ((j + 1) <= (inLine.Count - 1)) then\n            if (inLine.Middle((j + 1),1) = \"\\\") then\n              outLine = outLine + theChar\n            end \n          end\n          \n        else\n          outLine = outLine + theChar\n 
      \n        end\n          \n      end\n      \n    else  \n    \n      ' read thru the characters in the line \n      ' skipping the linefeed, carriage returns and literal characters \n      ' while building up the line string.  \n      \n      for each k in 0..(inLine.Count - 1)\n\n        theChar = inLine.Middle(k,1)      \n        if ((theChar.asAscii = 10) or (theChar.asAscii = 13)) then\n        \n        elseif (theChar = \"\\\") then\n                  \n          if ((k + 1) <= (inLine.Count - 1)) then\n            
if (inLine.Middle((k + 1),1) = \"\\\") then\n              outLine = outLine + theChar\n            end \n          end\n         \n        else\n          outLine = outLine + theChar\n        end      \n        \n      end\n    end\n    \n  end\n\nif (false) then \n  sedFile.SetPos(0)\n  sedFile.Close         \n  odbFile.Close\n  if (scriptDate<>NIL) then \n     sedIdent.set(\"date\", scriptDate)\n  end   \n  return sedIdent \nend"
	SearchStr:	"\n"
	FontSize:	1
)

(DocWin.54
	Owner:	53
	X:	413
	Y:	-3
	W:	836
	H:	937
)

(CSMgr.55
)

(DocAct.56
	Doc:	53
)

(SEd.57
	Name:	"SED.savecomment"
	CreationDate:	"Dienstag, 19. Januar 2016 17:37:05"
	GUIName:	"Script"
	Win:	58
	CSMgr:	59
	DocExts:	60
	ObjectTag:	39
	Source:	"' Name: SED.savecomment     : Tue Jan 19 17:38:38 2016 : getscripts.apr\n      sedFile = self.get(0)\n      odbFile = self.get(1)\n      sedName = self.get(2)\n      \n      ' write the CA DFG ITB ADT usage note.\n      if (false) then  \n        sedFile.WriteElt(\"' ==============================\")  \n        sedFile.WriteElt(\"' odb.extract.script usage note:\")\n        sedFile.WriteElt(\"' ==============================\")  \n        sedFile.WriteElt(\"'\" ++ SedName.Trim + \".ave extracted from:\" ++ odbFile.GetName.asSt
ring.Trim + NL +\n        \"' using the California Department of Fish and Game / Information Technology Branch's\" + NL +\n        \"' 'odb.extract.script' utility.  This utility is meant to encourage the sharing of code and\" + NL +\n        \"' knowledge.  Please, do not extract and use code without due credit to the author(s) and\" + NL +\n        \"' please, do not extract or utilize copyrighted code without the consent of the author(s).\" + NL +\n        NL + \"' odb.extract.script author: Isaac Oshima, ioshima@maph
ost.dfg.ca.gov; 199907.12\")    \n        sedFile.WriteElt(\"' ==============================\")  \n        sedFile.WriteElt(\"' odb.extract.script usage note:\")\n        sedFile.WriteElt(\"' ==============================\" + NL + NL)  \n      end\n      \n"
	SearchStr:	"\n"
	FontSize:	1
)

(DocWin.58
	Owner:	57
	X:	46
	Y:	73
	W:	878
	H:	514
)

(CSMgr.59
)

(DocAct.60
	Doc:	57
)

(SEd.61
	Name:	"SED.write"
	CreationDate:	"Montag, 18. Januar 2016 16:45:21"
	GUIName:	"Script"
	Win:	62
	CSMgr:	63
	DocExts:	64
	ObjectTag:	65
	Source:	"' Name: SED.write     : Tue Jan 19 11:31:39 2016 : getscriptssave.apr\n  \n  sedFile = self.get(0)\n  outLine = self.get(1)\n  \n  ' msgbox.report(outline, \"SED.write\")\n  \n  sedFile.WriteElt(outLine.Right(outLine.Count)) '  - 1))\n"
	SearchStr:	"\n"
	FontSize:	1
)

(DocWin.62
	Owner:	61
	X:	209
	Y:	567
	W:	914
	H:	317
)

(CSMgr.63
)

(DocAct.64
	Doc:	61
)

(Nil.65
)

(SEd.66
	Name:	"Web.OperationCheck"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	67
	CSMgr:	68
	DocExts:	69
	Source:	"' Name: Web.OperationCheck\n'\n  URLS     = self.get(0)\n  calledBy = self.get(1)\n  if (self.count>2) then cmdName = self.get(2) else  cmdName=\"cmd\" end\n\n  if (calledBy = \"dispatch\") then          cmdName = \"cmd\"  end\n  if (calledBy.contains(\"service\") ) then  cmdName = \"cmdKey\"  end\n\n  cmd = URLS.get(cmdName)\n  if (cmd = NIL) then  av.run(\"Put.Meldung\",{\"Required Parameter \" +cmdName+ \" not supplied.\"}) end\n\n  if (calledBy.contains(\"service\") ) then\n    cmd = calledBy +\".\" + cmd\n  end\n\n  tst = av.findDoc(cmd)
\n  msg = \"Required Service \"+cmd+\" not available or active.\"\n  if (tst=NIL) then av.run(\"Put.Meldung\",{msg}) end   ' EXITING !!\n\nreturn cmd\n"
)

(DocWin.67
	Owner:	66
	X:	95
	Y:	95
	W:	541
	H:	443
)

(CSMgr.68
)

(DocAct.69
	Doc:	66
)

(SEd.70
	Name:	"Web.ServerConfig"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	71
	CSMgr:	72
	DocExts:	73
	ObjectTag:	22
	Source:	"' Name: Web.ServerConfig     : Mon Jan 18 10:13:36 2016 : getscripts.apr\n\n' VorEinstellungen für den zu verwendenden Server werden vorgenommen\n' ABER noch nicht getestet.\n\n' Globale Variable der Anwendung:\n\n'   _WebServerProduct: Typ des Web-Servers : \"MicroSoft\" ODER  \"Netscape\"\n'   _WebServerURL      Portion of URL that calls the ESRIMap DLL on the WebServer\n'                      \"/scripts/esrimap.dll\" für MSoft   oder \n'                      \"/.esrimap\" für NScape)\n\n'   _username          optional\n'   _
password          optional\n\n'   _Server            Name des Rechners, an dessen IIS _WebServerURL eingerichtet ist\n'   _WebServerPort     TCP port on the web server computer which the web\n'                      server uses to communicate with the Internet. If\n'                      your web server uses the DEFAULT PORT , leave as 80 !!!\n\n'  _theTimeOut         # of seconds, ESRIMap waits for AV when busy (2-300)\n'  _theRetry           # of times, ESRIMap will try to reconnect to AV (2-10)\n'  _theMaxPend    
     # of requests, that can be waiting for AV (2-50)\n\n'  _dispatchScript     Name des Dispatch-Scripts, der die Erstaufbereitung\n'                      von eingehenden URL-Anforderungen ausführt !\n\n\n' I.  Parameter der IMS-Anwendung und des WEB-Servers (auf dem ESRIMAP läuft)\n' ---------------------------------------------------\n   _username = \"\"\n   _password = \"\"\n   _Server   = NIL\n\n    if ((self<>NIL)and(self.is(list))) then\n      serverConfig = self.get(0)\n\n      domainList = serverConfig.get(\"domains\")
\n\n    else\n      domainList = {\"ir0128\",\n             \"145.19.117.101\",\n             \"141.16.236.25\",\n             \"193.174.169.36\"\n                   }\n    end\n\n    if (domainList <> NIL) then\n      txt = \"The Service runs with domain '\"+_server.asstring+\"' actually!\"\n      txt = txt +nl+ \"Bitte 'neue' Domain  zuordnen!\"\n      domain = MsgBox.ChoiceasString(domainList, txt, \"Web-Server für diese Anwendung.\" )\n      if (domain <> NIL) then   _server = domain   end\n    end\n\n    if (_server=NIL) then msgbox.i
nfo(\"BREAK. A 'domain' must be specified\",\"Web.ServerConfig\")  exit end\n\n   _WebServerProduct = \"MicroSoft\"\n   _WebServerURL     = \"/scripts/esrimap.dll\"\n  '_WebServerURL     = \"/servlet/com.esri.esrimap.Esrimap\"\n\n\n\n   _WebServerPort = 80\n\n   _theTimeOut    = \"20\"\n   _theRetry      = \"5\"\n   _theMaxPend    = \"10\"\n\n\n' II. ArcView - spezifische VorEinstellungen der Anwendung\n' ---------------------------------------------------------\n\n   _dispatchScript  = \"dispatch\"\n\n\n"
	SearchStr:	"\n"
)

(DocWin.71
	Owner:	70
	X:	5
	Y:	5
	W:	857
	H:	600
)

(CSMgr.72
)

(DocAct.73
	Doc:	70
)

(SEd.74
	Name:	"Web.ServerReset"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	75
	CSMgr:	76
	DocExts:	77
	Source:	"' Name: Web.ServerReset\n'\n' 1. Konfiguration\n\n  ' 1.1\n  serverScriptName = \"Application.ServerParameters\"\n  serverScript = av.findDoc(serverScriptName)\n 'serverParams = \"\"\n  serverParams = av.run(serverScriptName, {})\n  if (serverParams=NIL) then  exit  end\n  txt = \"Did You check the Script  [\"+serverScriptName+\"]\"\n  txt = txt + nl+\"to contain all Parameters required to configure this Server? \"\n  if (msgbox.yesno(txt,\"Web.ServerReset\",true).not) then  return NIL  end\n\n\n  ' 1.2\n  urlScriptName = \"Application
.URLParameters\"\n  serverScript  = av.findDoc(urlScriptName)\n 'urlParams =\"\"\n  urlParams = av.run(urlScriptName, {})\n  if (urlParams = NIL) then  exit  end\n  txt = \"Did You check the script  [\"+urlScriptName+\"]\"\n  txt = txt+nl+\"to contain all URL-parameters required for this application? \"\n  if (msgbox.yesno(txt,\"Web.ServerReset\",true).not) then  return NIL  end\n\n\n' 2. Serviceunabhängige Einstellungen\n\n  av.Run(\"Web.ServerConfig\",{serverParams})\n\n\n' 3. Bennenung des Service nach \"aussen\"\n\n  serviceIDs = serv
erParams.get(\"servids\")\n  txt = \"Service is actually published as '\"+_serviceName.asstring+\"'\"\n  txt = txt+nl+\"Select another item to rename it!\"\n  newName = msgbox.listasstring(serviceIds, txt,\"Web.ServerReset\")\n  if (newName<>NIL) then  _serviceName = newName  end\n\n  if (_serviceName=NIL) then\n    msgbox.info(\"BREAK. No ServiceName specified !\",\"Web.ServerReset\")\n    exit\n  end\n\n\n' 4. Check des Servers\n\n  checked = av.Run(\"Web.ServerCheck\",{})\n  if (checked=NIL) then return NIL  end\n\n\n'5. Connect des Serv
ice\n\n  disconnect = av.Run(\"Web.DisConnect\",{})\n  connected  = av.Run(\"Web.Connect\",{})\n  if (connected.Not) then  return NIL   end\n\n\n"
)

(DocWin.75
	Owner:	74
	X:	65
	Y:	65
	W:	559
	H:	572
)

(CSMgr.76
)

(DocAct.77
	Doc:	74
)

(SEd.78
	Name:	"Web.SizedDoc"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	79
	CSMgr:	80
	DocExts:	81
	Source:	"'Name : Web.SizedDoc\n' GrößenEinstellung der View-Windows\n' Korrekturgrößen für die Rahmen der View-Fenster\n' in AV auf WINNT/WIN2000\n\nkorrX = 17\nkorrY = 38  ' 34\ntocWidth = 0\ntheViewName=NIL\n\n' Standard : Aktiver View\ntheView = av.getactiveDoc\n\nif (self<>NIL) then\n  dx    = self.get(0)\n  dy    = self.get(1)\n  if (self.count>2) then  theViewName = self.get(2)  end\n  if (self.count>3) then  tocWidth = self.get(3)  end\n\n  if (theViewName<>NIL) then\n    theView=av.findDoc(theViewName)\n    if (theView=NIL) then
 return NIL  end\n  end\nend\n\ntheView.SetTOCWidth(tocWidth)\nvWin         = theView.getWin\nstartSizeRec = vWin.ReturnExtent\n\nvWin.Open\nvWin.Resize(dx+korrX, dy+korrY)\nvWin.Activate\n\nreturn startSizeRec\n\n\n"
)

(DocWin.79
	Owner:	78
	X:	35
	Y:	35
	W:	363
	H:	256
)

(CSMgr.80
)

(DocAct.81
	Doc:	78
)

(SEd.82
	Name:	"Web.ViewSize"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	83
	CSMgr:	84
	DocExts:	85
	ObjectTag:	22
	Source:	"' Name: Web.ViewSize     : Mon Jan 18 10:15:01 2016 : getscripts.apr\n' Einstellen der Größe des zu verarbeitenden Views\n\nURLS = self.get(0)\n\nimaDX = URLS.get(\"IMADX\")\nimaDY = URLS.get(\"IMADY\")\n\nif ((imaDX=NIL) or (imaDY=NIL)) then\n  imaDX = 200 ' _maxX_Map\n  imaDY = 150 ' _maxY_Map\n  URLS.Add(\"IMADX\",imaDX.asString)\n  URLS.Add(\"IMADY\",imaDY.asString)\nelse\n  imaDX = imaDX.asNumber\n  imaDY = imaDY.asNumber\nend\n\nviewName = URLS.get(\"VIEW\")\n\nif (viewName <> NIL) then\n  'msgbox.info(imaDX.asString+\"::\"+imaDY.asS
tring,viewName)\n  av.Run(\"Web.SizedDoc\",{imaDX,imaDY, viewName})\nelse\n  'msgbox.info(\"View nicht erkannt\",\"A!\")\nend\n\n"
	SearchStr:	"\n"
)

(DocWin.83
	Owner:	82
	X:	260
	Y:	184
	W:	697
	H:	615
)

(CSMgr.84
)

(DocAct.85
	Doc:	82
)

(SEd.86
	Name:	"Workspace.Settings"
	CreationDate:	"Freitag, 15. Januar 2016 16:03:42"
	GUIName:	"Script"
	Win:	87
	CSMgr:	88
	DocExts:	89
	ObjectTag:	22
	Source:	"' Name: Workspace.Settings     : Mon Jan 18 10:16:55 2016 : getscripts.apr\n' Script setzt die Enviromentvariable \"AVWORKSPACE\"\n\n 'Workspace\nfn1 = av.GetProject.GetFileName\nfns = fn1.GetFullName.AsString\n\n\n  'msgbox.info(fns, \"\")\n\nfns1 = fns.Substitute(\"\\\\\"+av.GetProject.GetName, \"\")\nfns1 = fns1.Substitute(\"\\projects\", \"\")\n\nfns2 = fns1\n\nws = \"\"\ni = 2\nwhile (true)\n\n    z=fns1.Right(i)\n    if (z.Contains(\"\\\\\")) then\n        break\n    else\n        ws = z\n    end\n    i=i+1\n\nend\n\nfnWS = fns1.AsFileName\n\n'msgbox.i
nfo(fnWS.AsString+fns1.AsFileName.AsString, fns1)\n\nsystem.SetEnvVar(\"AVWORKSPACE\", fnWS.GetFullName)\n\n'msgbox.info(system.GetEnvVar(\"AVWORKSPACE\")++fns1++fnWS.GetFullName, (fns1.AsFileName).GetFullName)\n\n'Workspacenamen in Titelzeile\nav.SetName(\"Projekt:\"++av.GetProject.GetName++\"  aktueller Workspace:\"++ws)\n\n\n"
	SearchStr:	"\n"
)

(DocWin.87
	Owner:	86
	X:	50
	Y:	50
	W:	662
	H:	622
)

(CSMgr.88
)

(DocAct.89
	Doc:	86
)

(SEd.90
	Name:	"xxxSED.GetAPR:1601191315"
	CreationDate:	"Freitag, 12. Dezember 2008 16:22:25"
	GUIName:	"Script"
	Win:	91
	CSMgr:	92
	DocExts:	93
	ObjectTag:	44
	Source:	"' Name: SED.GetAPR     : Mon Jan 18 12:37:31 2016 : getscripts.apr\n\nscriptsList = {}\n\naprFileName = self.get(0)\nqString     = self.get(1)  ' \"(Script.\" or \"(SEd.\"\n\nqStringLen = qString.count\n\naprFile = LineFile.Make(aprFilename,#FILE_PERM_READ)\naprLineCount = aprFile.GetSize    \napr = TRUE\navx = FALSE\n\n' read thru the extension and retrieve all the\n' \"Script.\" object names and their positions in\n' the extension.\n\n  nxtname = FALSE\n  nxtdate = FALSE \n  qt = (34).asChar ' 34 = ascii(\") ' qt = \":\"\n\n	for each i
 in 0..(aprLineCount - 1)\n	    \n	    inLine = aprFile.ReadElt.Trim  \n	       \n	    if (inLine.Left(qStringLen) = qString) then  \n	      nxtName = TRUE\n       outLine = \"\" \n	     end\n	  \n	    if (nxtName = TRUE) then\n	      if (inLine.Trim.Left(5) = \"Name:\") then  \n	        SedName = (inLine.Trim.asTokens(qt).Get(1))  ' .Trim.Substitute(qt,\"\")        \n	        inLine = \"\"\n         outLine = SedName ' + \":\" + i.asString.Trim)  \n	        ' scriptsList.Add(outLine)\n	        nxtname = FALSE\n         nxtdate = TR
UE 	 \n       end\n	    end    \n\n	    if (nxtdate = TRUE) then\n	      if (inLine.Trim.Left(13) = \"CreationDate:\") then  \n	        CreaDate = (inLine.Trim.asTokens(qt).Get(1)) ' .Trim.Substitute(qt,\"\")        \n	        outLine = outLine + \":\" + CreaDate.quote\n	        scriptsList.Add(outLine) \n\n	        nxtdate = FALSE\n         outLine = \"\" \n	      end\n	    end \n     \n	end\n\n\n	' if no script objects were found\n	if (scriptsList.Count = 0) then\n	    MsgBox.Error(\"No scripts contained within:\" ++ aprFileName.asstr
ing,\"Aborting\")\n	    Return Nil\n	end\n\n\n    ' prompt user to select a script to extract\n    \n    scriptString = Msgbox.ListAsString(scriptsList,\"Select Script(s) to Extract\",\"Script Extractor\")\n    \n    ' if user cancelled\n    if (scriptString = Nil) then\n      MsgBox.Error(\"User Cancelled\",\"Aborting\")\n      Return Nil\n    else\n    	' get the script name, position in the avx and init the output script name\n      scriptName = scriptString.Trim.asTokens(\":\").Get(0).Trim\n      scriptPosition = scriptString.Trim
.asTokens(\":\").Get(1).Trim.asNumber  \n      scriptFile = (scriptName + \".ave\").asFilename   \n    end\n    \n    ' prompt user for output script name\n    sedFilename = FileDialog.Put(scriptFile,\"*.ave\",\"Output Script\")\n\n    ' if user cancelled\n    if (sedFilename = Nil) then\n      aprFile.Close\n      Msgbox.Error(\"User Cancelled\",\"Aborting\")\n      Return Nil\n    end    \n    \n    ' make output script file\n    sedFile = LineFile.Make(sedFilename,#FILE_PERM_WRITE)\n    \n    theChar = \"\"\n    outLine = \"\"\n    SedNam
e = \"\"\n    \n    ' set the avx file position to the start of the\n    ' user selected script and calculate the end position\n    aprFile.SetPos(scriptPosition)\n    avxEnd = (aprLineCount - scriptPosition)\n    \n	' read thru the avx and retrieve the script code\n \n    for each i in 0..(avxEnd - 1)\n      \n      ' read a line from the avx file\n      inLine = aprFile.ReadElt.Trim  \n\n      ' determine if this is the end of the script object\n      if ((inLine.Count = 1) and (inLine = \")\")) then\n\n        ' ask user if 
he/she would like to add the script to the current project\n        answer = Msgbox.YesNo(\"Add to Project?\",SedName.Trim,TRUE)\n      \n        if (answer) then  \n          sedFile.SetPos(0)\n\n          aprFile.Close\n          sedFile.Close         \n\n          txtSed = TextFile.Make(sedFile.GetFileName,#FILE_PERM_READ)                    \n          newSEd = SEd.MakeFromSource(txtSed.Read(txtSed.GetSize),scriptName.asString.Trim)               \n          txtSEd.Close         \n\n          newSEd.GetWin.Open       
             \n        else        \n          aprFile.Close\n          sedFile.Close         \n        end      \n        \n        Return Nil               \n      end\n    \n      \n      ' search for start of avx script object    \n      if (inLine.Left(8) = \"(Script.\") then\n        inLine = \"\"\n        continue\n      end\n    \n      ' search for script object's name property\n      ' write the CA DFG ITB ADT usage note.\n      if (inLine.Trim.Left(5) = \"Name:\") then\n        qt = (34).asChar\n        SedName = (inLine.
Trim.asTokens(\":\").Get(1)).Trim.Substitute(qt,\"\")      \n       \n       if (false) then  \n        sedFile.WriteElt(\"' ==============================\")  \n        sedFile.WriteElt(\"' odb.extract.script usage note:\")\n        sedFile.WriteElt(\"' ==============================\")  \n        sedFile.WriteElt(\"'\" ++ SedName.Trim + \".ave extracted from:\" ++ aprFile.GetName.asString.Trim + NL +\n        \"' using the California Department of Fish and Game / Information Technology Branch's\" + NL +\n        \"' 'odb.extract.
script' utility.  This utility is meant to encourage the sharing of code and\" + NL +\n        \"' knowledge.  Please, do not extract and use code without due credit to the author(s) and\" + NL +\n        \"' please, do not extract or utilize copyrighted code without the consent of the author(s).\" + NL +\n        NL + \"' odb.extract.script author: Isaac Oshima, ioshima@maphost.dfg.ca.gov; 199907.12\")    \n        sedFile.WriteElt(\"' ==============================\")  \n        sedFile.WriteElt(\"' odb.extract.script u
sage note:\")\n        sedFile.WriteElt(\"' ==============================\" + NL + NL)  \n       end\n        \n        inLine = \"\"\n        continue\n      end\n    \n      if (inLine.Left(11) = \"SourceCode:\") then   \n        inLine = inLine.Right(inLine.Count - 11)    \n      end\n    \n      ' if the avx line contains a newline character\n      ' parse thru and retain the next part for append \n      ' to the next line\n      if (inLine.Contains(\"\\n\")) then\n        \n        for each j in 0..(inLine.Count - 1)\n          
theChar = inLine.Middle(j,1)\n          nxtLine = inLine.Middle(j,2)\n    \n          if (nxtLine = \"\\n\") then\n            outLine = (outLine + NL).Trim\n            sedFile.WriteElt(outLine.Right(outLine.Count - 1))\n            outLine = \"\"\n          else\n            ' if the character is a \"literal\" then strip the literal\n            ' marker and use the next character \"literally\".\n              \n            if (theChar = \"\\\") then\n\n             if ((j + 1) <= (inLine.Count - 1)) then\n               if (inLin
e.Middle((j + 1),1) = \"\\\") then\n                  outLine = outLine + theChar\n               end \n             end\n            \n            else\n            \n              outLine = outLine + theChar\n                \n            end\n          \n          end\n        end\n        \n      else  \n      	' read thru the characters in the line skipping the linefeed, carriage returns and literal\n      	' characters while building up the line string.  \n\n        for each k in 0..(inLine.Count - 1)\n\n          theChar =
 inLine.Middle(k,1)      \n          if ((theChar.asAscii = 10) or (theChar.asAscii = 13)) then\n          \n          \n          elseif (theChar = \"\\\") then\n                    \n           if ((k + 1) <= (inLine.Count - 1)) then\n             if (inLine.Middle((k + 1),1) = \"\\\") then\n                outLine = outLine + theChar\n             end \n           end\n           \n          else\n            outLine = outLine + theChar\n          end      \n        end\n      end\n\n    end\n\n	' ask user if he/she would like to
 add to the project\n  	answer = Msgbox.YesNo(\"Add to Project?\",SedName.Trim,TRUE)\n\n	if (answer) then  \n		sedFile.SetPos(0)\n\n		aprFile.Close\n		sedFile.Close         \n\n		txtSed = TextFile.Make(sedFile.GetFileName, #FILE_PERM_READ)                    \n\n		newSEd = SEd.MakeFromSource(txtSed.Read(txtSed.GetSize),scriptName.asString.Trim)               \n		txtSEd.Close         \n\n		newSEd.GetWin.Open                    \n	else        \n		aprFile.Close\n		sedFile.Close         \n	end      \n    \n\n	' *** NOTE: comments for
 handling the apr have been omitted from this version\n	' as the code is virtually identical to the handling of the avx.  The differences\n	' are the script object flag is \"SEd.\" not \"Script.\" and the apr contains more\n	' script object properties to handle.\n	' ***\n\n	nxtname = FALSE\n\n	for each i in 0..(aprLineCount - 1)\n\n		inLine = aprFile.ReadElt.Trim  \n\n		if (inLine.Left(5) = \"(SEd.\") then\n		  nxtName = TRUE\n		 end\n\n		if (nxtName = TRUE) then\n		  if (inLine.Trim.Left(5) = \"Name:\") then  \n		    qt = (34).asCh
ar\n		    SedName = (inLine.Trim.asTokens(\":\").Get(1)).Trim.Substitute(qt,\"\")        \n		    inLine = \"\"\n		    scriptsList.Add(SedName + \":\" + i.asString.Trim)\n		    nxtname = FALSE\n		  end\n		end\n	    \n	end\n\n\n\n	if (scriptsList.Count = 0) then\n	    MsgBox.Error(\"No scripts contained within:\" ++ aprFilename.asstring,\"Aborting\")\n	    Return Nil\n	else\n	    scriptString = Msgbox.ListAsString(scriptsList,\"Select Script to Extract\",\"Script Extractor\")\n	    \n	    if (scriptString = Nil) then\n	      MsgBox.Error(\"User
 Cancelled\",\"Aborting\")\n	      Return Nil\n	    else\n	      scriptName = scriptString.Trim.asTokens(\":\").Get(0).Trim\n	      scriptPosition = scriptString.Trim.asTokens(\":\").Get(1).Trim.asNumber  \n	      scriptFile = (scriptName + \".ave\").asFilename   \n	    end\n	    \n	    sedFilename = FileDialog.Put(scriptFile,\"*.ave\",\"Output Script\")\n\n	    if (sedFilename = Nil) then\n	      aprFile.Close\n	      Msgbox.Error(\"User Cancelled\",\"Aborting\")\n	      Return Nil\n	    end    \n	    \n	    sedFile = LineFile.Make(sedFil
ename,#FILE_PERM_WRITE)\n\n	    theChar = \"\"\n	    outLine = \"\"\n	    SedName = \"\"\n	    \n	    aprFile.SetPos(scriptPosition)\n	    aprEnd = (aprLineCount - scriptPosition)\n\n	    for each i in 0..(aprEnd - 1)\n	      \n	      inLine = aprFile.ReadElt.Trim  \n	    \n	      if ((inLine.Count = 1) and (inLine = \")\")) then\n\n	        answer = Msgbox.YesNo(\"Add to Project?\",SedName.Trim,TRUE)\n	      \n	        if (answer) then  \n	          sedFile.SetPos(0)\n\n	          aprFile.Close\n	          sedFile.Close         \n\n	     
     txtSed = TextFile.Make(sedFile.GetFileName,#FILE_PERM_READ)                    \n	          newSEd = SEd.MakeFromSource(txtSed.Read(txtSed.GetSize),scriptName.asString.Trim)               \n	          txtSEd.Close         \n\n	          newSEd.GetWin.Open                    \n	        else        \n	          aprFile.Close\n	          sedFile.Close         \n	        end      \n	      \n	        Return Nil               \n	      end\n	      \n	      \n	      if (inLine.Left(5) = \"((SEd.\") then\n	        inLine = \"\"\n	
        continue\n	      end\n	    \n	      if (inLine.Trim.Left(5) = \"Name:\") then\n	        qt = (34).asChar\n	        SedName = (inLine.Trim.asTokens(\":\").Get(1)).Trim.Substitute(qt,\"\")        \n	       if (FALSE) then  \n	        sedFile.WriteElt(\"' ==============================\")  \n	        sedFile.WriteElt(\"' odb.extract.script usage note:\")\n	        sedFile.WriteElt(\"' ==============================\")  \n	        sedFile.WriteElt(\"'\" ++ SedName.Trim + \".ave extracted from:\" ++ aprFile.GetName.asString.Trim 
+ NL +\n	        \"' using the California Department of Fish and Game / Information Technology Branch's\" + NL +\n	        \"' 'odb.extract.script' utility.  This utility is meant to encourage the sharing of code and\" + NL +\n	        \"' knowledge.  Please, do not extract and use code without due credit to the author(s) and\" + NL +\n	        \"' please, do not extract or utilize copyrighted code without the consent of the author(s).\" + NL +\n	        NL + \"' odb.extract.script author: Isaac Oshima, ioshima@maphost.d
fg.ca.gov; 199907.12\")    \n	        sedFile.WriteElt(\"' ==============================\")  \n	        sedFile.WriteElt(\"' odb.extract.script usage note:\")\n	        sedFile.WriteElt(\"' ==============================\" + NL + NL)  \n	       end \n	        inLine = \"\"\n	        continue\n	      end\n	    \n	      if (inLine.Left(13) = \"CreationDate:\") then\n	        continue\n	      end\n	    \n	      if (inLine.Left(8) = \"GUIName:\") then\n	        continue\n	      end\n	    \n	      if (inLine.Left(4) = \"Win:\") then\n	        
continue\n	      end\n	    \n	      if (inLine.Left(6) = \"CSMgr:\") then\n	        continue\n	      end\n	    \n	      if (inLine.Left(8) = \"DocExts:\") then\n	        continue\n	      end\n	      \n	    \n	      if (inLine.Left(7) = \"Source:\") then   \n	        inLine = inLine.Right(inLine.Count - 7)    \n	      end\n	    \n	      \n	      if (inLine.Contains(\"\\n\")) then\n	        \n	        for each j in 0..(inLine.Count - 1)\n	          theChar = inLine.Middle(j,1)\n	          nxtLine = inLine.Middle(j,2)\n	    \n	          if (
nxtLine = \"\\n\") then\n	            outLine = (outLine + NL).Trim\n	            sedFile.WriteElt(outLine.Right(outLine.Count - 1))\n	            outLine = \"\"\n	          else\n	            if (theChar = \"\\\") then\n\n	             if ((j + 1) <= (inLine.Count - 1)) then\n	               if (inLine.Middle((j + 1),1) = \"\\\") then\n	                  outLine = outLine + theChar\n	               end \n	             end\n	            \n	            else\n	            \n	              outLine = outLine + theChar\n	                \n
	            end\n	          end\n	        end\n	        \n	      else  \n	          \n	        for each k in 0..(inLine.Count - 1)\n	          theChar = inLine.Middle(k,1)      \n	          if ((theChar.asAscii = 10) or (theChar.asAscii = 13)) then\n	          \n	          \n	          elseif (theChar = \"\\\") then\n	                    \n	           if ((k + 1) <= (inLine.Count - 1)) then\n	             if (inLine.Middle((k + 1),1) = \"\\\") then\n	                outLine = outLine + theChar\n	             end \n	           en
d\n	           \n	          else\n	            outLine = outLine + theChar\n	          end      \n	        end\n	      \n	      end    \n	    \n	    end \n	  \n	end\n	  \n\n	answer = Msgbox.YesNo(\"Add to Project?\",SedName.Trim,TRUE)\n\n	if (answer) then  \n	    sedFile.SetPos(0)\n	  \n	    aprFile.Close\n	    sedFile.Close         \n	  \n	    txtSed = TextFile.Make(sedFile.GetFileName,#FILE_PERM_READ)                    \n	    newSEd = SEd.MakeFromSource(txtSed.Read(txtSed.GetSize),scriptName.asString.Trim)               \n	    tx
tSEd.Close         \n	  \n	    newSEd.GetWin.Open                    \n	else        \n	    aprFile.Close\n	    sedFile.Close         \n	end      \n    \n"
	SearchStr:	"\n"
	FontSize:	1
)

(DocWin.91
	Owner:	90
	X:	229
	Y:	94
	W:	899
	H:	790
)

(CSMgr.92
)

(DocAct.93
	Doc:	90
)

(SEd.94
	Name:	"xxxSED.GetAVX:1601191315"
	CreationDate:	"Freitag, 12. Dezember 2008 16:16:09"
	GUIName:	"Script"
	Win:	95
	CSMgr:	96
	DocExts:	97
	ObjectTag:	98
	Source:	"' Name: SED.GetAVX  \n  \n  scriptsList = {}\n\n  if (self<>NIL) then \n    avxFileName = self.get(0)\n    \n  else\n    FileList = FileDialog.ReturnFiles({\"*.avx\",\"*.apr\"},{\"Extension (*.avx)\",\n    \"Project (*.apr)\"},\"Select Script-Src-ODB\",0)\n    \n    if (FileList.count=0) then return nil end\n     \n    avxFileName = FileList.Get(0)\n  end \n  \n  inFileName = avxFileName.asString.Trim\n  \n  avxFile = LineFile.Make(avxFilename,#FILE_PERM_READ)\n  avxLineCount = avxFile.GetSize\n\n' 1. read thru the extension and retrieve
 all the\n  '  \"Script.\" object names and their positions in\n  '  the extension.\n  \n  nxtname = FALSE\n  \n  for each i in 0..(avxLineCount - 1)\n    \n    inLine = avxFile.ReadElt.Trim  \n  \n    ' \n    if (inLine.Left(8) = \"(Script.\") then\n      nxtName = TRUE\n    end\n  \n    if (nxtName = TRUE) then\n      if (inLine.Trim.Left(5) = \"Name:\") then  \n        qt = (34).asChar\n        SedName = (inLine.Trim.asTokens(\":\").Get(1)).Trim.Substitute(qt,\"\")   \n             \n        inLine = \"\"\n        scriptsList.Add(SedNam
e + \":\" + i.asString.Trim)\n      \n        nxtname = FALSE\n      end\n    end    \n  end\n  \n  ' if no script objects were found\n  if (scriptsList.Count = 0) then\n    MsgBox.Error(\"No scripts contained within:\" ++ inFilename,\"Aborting\")\n    Return Nil\n  end\n  \n  getList = msgbox.multilistasstring(scriptsList,\"Select scripts to retrieve!\",\"SED.GetAVX\")\n  if (getList=NIL) then  return NIL  end\n  \n' 2. prompt user to select a script to extract\n  \n  for each  scriptString in  getList\n    \n    ' if user cancelled\n  
  ' get the script name, position in the avx and init the output script name\n  \n    scriptName = scriptString.Trim.asTokens(\":\").Get(0).Trim\n    scriptPosition = scriptString.Trim.asTokens(\":\").Get(1).Trim.asNumber  \n\n    ' prompt user for output script name\n  \n    if (FALSE) then \n      scriptFile = (scriptName + \".ave\").asFilename   \n      sedFilename = FileDialog.Put(scriptFile,\"*.ave\",\"Output Script\")\n      if (sedFilename = Nil) then\n        avxFile.Close\n        Msgbox.Error(\"User Cancelled\",\"Aborting
\")\n        Return Nil\n      end    \n    else\n      sedFilename = (\"retrieve.ave\").asFilename    \n    end\n    \n    ' make output script file\n    sedFile = LineFile.Make(sedFilename,#FILE_PERM_WRITE)\n    \n    theChar = \"\"\n    outLine = \"\"\n    SedName = \"\"\n    \n    ' set the avx file position to the start of the\n    ' user selected script and calculate the end position\n    \n    avxFile.SetPos(scriptPosition)\n    avxEnd = (avxLineCount - scriptPosition)\n    \n  ' read thru the avx and retrieve the script code\n \n
    for each i in 0..(avxEnd - 1)\n      \n      ' read a line from the avx file\n      inLine = avxFile.ReadElt.Trim  \n\n      ' determine if this is the end of the script object\n      if ((inLine.Count = 1) and (inLine = \")\")) then\n        ' ask user if he/she would like to add the script to the current project\n        ' answer = Msgbox.YesNo(\"Add to Project?\",SedName.Trim,TRUE)\n       \n        answer = true  \n        if (answer) then  \n          sedFile.SetPos(0)\n          avxFile.Close\n          sedFile.Clo
se         \n\n          txtSed = TextFile.Make(sedFile.GetFileName,#FILE_PERM_READ)                    \n          newSEd = SEd.MakeFromSource(txtSed.Read(txtSed.GetSize),scriptName.asString.Trim)               \n          txtSEd.Close         \n\n          newSEd.GetWin.Open                    \n        else        \n          avxFile.Close\n          sedFile.Close         \n        end\n              \n        BREAK    ' statt return Nil               \n      end\n      \n      \n      ' search for start of avx script o
bject    \n      if (inLine.Left(8) = \"(Script.\") then\n        inLine = \"\"\n        continue\n      end\n    \n      ' search for script object's name property\n\n      if (inLine.Trim.Left(5) = \"Name:\") then\n        qt = (34).asChar\n        SedName = (inLine.Trim.asTokens(\":\").Get(1)).Trim.Substitute(qt,\"\")      \n        inLine  = \"\"\n        continue\n      end\n    \n      if (inLine.Left(11) = \"SourceCode:\") then   \n        inLine = inLine.Right(inLine.Count - 11)    \n      end\n    \n      ' if the avx line contain
s a newline character\n      ' parse thru and retain the next part for append \n      ' to the next line\n      if (inLine.Contains(\"\\n\")) then\n        \n        for each j in 0..(inLine.Count - 1)\n          theChar = inLine.Middle(j,1)\n          nxtLine = inLine.Middle(j,2)\n    \n          if (nxtLine = \"\\n\") then\n            outLine = (outLine + NL).Trim\n            sedFile.WriteElt(outLine.Right(outLine.Count - 1))\n            outLine = \"\"\n            \n          else\n            ' if the character is a \"liter
al\" then strip the literal\n            ' marker and use the next character \"literally\".\n              \n            if (theChar = \"\\\") then\n\n             if ((j + 1) <= (inLine.Count - 1)) then\n               if (inLine.Middle((j + 1),1) = \"\\\") then\n                  outLine = outLine + theChar\n               end \n             end\n            \n            else\n            \n              outLine = outLine + theChar\n                \n            end\n          \n          end\n        end\n        \n      else  \n   
     \n      ' read thru the characters in the line skipping the linefeed, carriage returns and literal\n      ' characters while building up the line string.  \n\n        for each k in 0..(inLine.Count - 1)\n\n          theChar = inLine.Middle(k,1)      \n          if ((theChar.asAscii = 10) or (theChar.asAscii = 13)) then\n          \n          \n          elseif (theChar = \"\\\") then\n                    \n           if ((k + 1) <= (inLine.Count - 1)) then\n             if (inLine.Middle((k + 1),1) = \"\\\") then\n       
         outLine = outLine + theChar\n             end \n           end\n           \n          else\n            outLine = outLine + theChar\n          end      \n        end\n      end\n    end\n\n    if (outLine.count > 0) \n       sedFile.WriteElt(outLine.Right(outLine.Count - 1))\n    end\n    sedFile.Close         \n\n' -------------------------\n    \n   if (false) then   \n   ' ask user if he/she would like to add to the project\n   ' answer = Msgbox.YesNo(\"Add to Project?\",SedName.Trim,TRUE)\n    answer = true\n    if (
answer) then  \n      sedFile.SetPos(0)\n      sedFile.Close         \n  \n      txtSed = TextFile.Make(sedFile.GetFileName, #FILE_PERM_READ)                    \n      newSEd = SEd.MakeFromSource(txtSed.Read(txtSed.GetSize),scriptName.asString.Trim)               \n      txtSEd.Close         \n  \n      newSEd.GetWin.Open                    \n    end\n   end\n    \n  end ' for each \n  \n  avxFile.Close\n    \n"
	SearchStr:	"outLine"
	FontSize:	1
)

(DocWin.95
	Owner:	94
	X:	119
	Y:	63
	W:	992
	H:	990
)

(CSMgr.96
)

(DocAct.97
	Doc:	94
)

(FN.98
	Path:	"C:/ap/MonApp/av3tools/tools_getscripts/ave/SED_GetAVX.ave"
)

(LButn.99
	HelpTopic:	"New_button"
	Update:	"Doc.NewUpdate"
	Label:	"&New"
	Click:	"Script.New"
)

(LButn.100
	HelpTopic:	"Open_button"
	Update:	"Doc.OpenUpdate"
	Label:	"&Open"
	Click:	"Doc.Open"
)

(LButn.101
	HelpTopic:	"Run_button"
	Update:	"Script.ActionUpdate"
	Label:	"&Run"
	Click:	"Script.Action"
)

(FN.102
	Path:	"$USEREXT/gia_ordner.avx"
)

(FN.103
	Path:	"$USEREXT/gia_sedit.avx"
)

(NameDict.104
)

(NameDict.105
	Obj:	106
	Obj:	107
)

(AVDict.106
	InternalName:	"Table of Contents Defaults Dialog"
)

(AVDict.107
	InternalName:	"_Thor_"
)

(DocGUI.883
	Name:	"Project"
	Type:	"Project"
	Modified:	1
	MenuBar:	884
	ButnBar:	943
	Popups:	957
	ToolBar:	958
	Icon:	959
)

(MenuBar.884
	Child:	885
	Child:	896
	Child:	906
	Child:	915
	Child:	920
)

(PMenu.885
	InternalName:	"File"
	Child:	886
	Child:	887
	Child:	888
	Child:	889
	Child:	890
	Child:	891
	Child:	892
	Child:	893
	Child:	894
	Child:	895
	Label:	"&File"
)

(Choice.886
	Help:	"Creates a new project"
	HelpTopic:	"New_Project"
	Label:	"&New Project"
	Click:	"Project.New"
	Shortcut:	"Keys.Ctrl+N"
)

(Choice.887
	Help:	"Opens an existing project"
	HelpTopic:	"Open_Project"
	Label:	"&Open Project..."
	Click:	"Project.Open"
	Shortcut:	"Keys.None"
)

(Choice.888
	Help:	"Closes the project window"
	HelpTopic:	"Close_Project"
	Label:	"&Close Project"
	Click:	"Project.Close"
	Shortcut:	"Keys.None"
)

(Space.889
)

(Choice.890
	Help:	"Saves the current project"
	HelpTopic:	"Save_Project"
	Label:	"&Save Project"
	Click:	"Project.Save"
	Shortcut:	"Keys.Ctrl+S"
)

(Choice.891
	Help:	"Saves the current project with a new name"
	HelpTopic:	"Save_Project_As"
	Label:	"Save Project &As..."
	Click:	"Project.SaveAs"
	Shortcut:	"Keys.None"
)

(Space.892
)

(Choice.893
	Help:	"Displays the Extensions dialog"
	HelpTopic:	"Extensions"
	Label:	"&Extensions..."
	Click:	"Appl.GetExtensionWin"
	Shortcut:	"Keys.None"
)

(Space.894
)

(Choice.895
	Help:	"Exits ArcView"
	HelpTopic:	"Exit"
	Label:	"E&xit"
	Click:	"Project.Exit"
	Shortcut:	"Keys.None"
)

(PMenu.896
	InternalName:	"Project"
	Child:	897
	Child:	898
	Child:	899
	Child:	900
	Child:	901
	Child:	902
	Child:	903
	Child:	904
	Child:	905
	Label:	"&Project"
)

(Choice.897
	Help:	"Displays the dialog box to edit properties of the project"
	HelpTopic:	"Project_Properties"
	Label:	"&Properties..."
	Click:	"Project.Properties"
	Shortcut:	"Keys.None"
)

(Choice.898
	Help:	"Customizes the active project"
	HelpTopic:	"Customize"
	Update:	"Project.CustomizeUpdate"
	Label:	"&Customize..."
	Click:	"Project.Customize"
	Shortcut:	"Keys.None"
)

(Space.899
)

(Choice.900
	Help:	"Renames the selected project component"
	HelpTopic:	"Rename"
	Update:	"Project.RenameUpdate"
	Label:	"&Rename 'AppFile.Get'..."
	Click:	"Project.Rename"
	Shortcut:	"Keys.Ctrl+R"
)

(Choice.901
	Help:	"Deletes the selected component from the project"
	HelpTopic:	"Delete_Component"
	Update:	"Project.DeleteUpdate"
	Label:	"&Delete 'AppFile.Get'..."
	Click:	"Project.Delete"
	Shortcut:	"Keys.Del"
)

(Space.902
)

(Choice.903
	Help:	"Adds a table to the project"
	HelpTopic:	"Add_Table"
	Update:	"Project.AddTableUpdate"
	Label:	"&Add Table..."
	Click:	"Project.AddTable"
	Shortcut:	"Keys.None"
)

(Choice.904
	Help:	"Creates a new project component from an external source"
	HelpTopic:	"Import"
	Update:	"Project.ImportUpdate"
	Label:	"&Import..."
	Click:	"Project.Import"
	Shortcut:	"Keys.None"
)

(Choice.905
	Help:	"Opens the SQL Connection manager"
	HelpTopic:	"SQL_Connect"
	Update:	"Project.HasSQL"
	Label:	"&SQL Connect..."
	Click:	"Project.SQLConnect"
	Shortcut:	"Keys.None"
)

(PMenu.906
	InternalName:	"Window"
	Child:	907
	Child:	908
	Child:	909
	Child:	910
	Child:	911
	Child:	912
	Child:	914
	Label:	"&Window"
)

(Choice.907
	Help:	"Arranges windows as non-overlapping tiles"
	HelpTopic:	"Tile"
	Label:	"&Tile"
	Click:	"Project.Tile"
	Shortcut:	"Keys.None"
)

(Choice.908
	Help:	"Arranges windows"
	HelpTopic:	"Cascade"
	Label:	"&Cascade"
	Click:	"Project.Cascade"
	Shortcut:	"Keys.None"
)

(Choice.909
	Help:	"Arranges iconified windows"
	HelpTopic:	"Arrange_Icons"
	Label:	"&Arrange Icons"
	Click:	"Project.ArrangeIcons"
	Shortcut:	"Keys.None"
)

(Space.910
)

(Choice.911
	Help:	"Shows the symbol window"
	HelpTopic:	"Show_Symbol_Window"
	Label:	"Show Symbol Window..."
	Click:	"Project.ShowHideSymWin"
	Shortcut:	"Keys.Ctrl+P"
)

(Space.912
	ObjectTag:	913
	Update:	"WindowMenuUpdate"
)

(AVStr.913
	S:	"getscriptssave.apr"
)

(Choice.914
	Help:	"Activates getscriptssave.apr"
	Label:	"&1 getscriptssave.apr"
	Click:	"WindowActivate"
	Shortcut:	"Keys.None"
)

(PMenu.915
	InternalName:	"Help"
	Child:	916
	Child:	917
	Child:	918
	Child:	919
	Label:	"&Help"
)

(Choice.916
	Help:	"Displays the dialog for browsing and searching ArcView's help system"
	HelpTopic:	"Help_on_Help_Topics"
	Label:	"Help &Topics..."
	Click:	"Project.HelpTopics"
	Shortcut:	"Keys.None"
)

(Choice.917
	Help:	"Provides instructions for how to obtain help from ArcView"
	HelpTopic:	"Help_on_How_to_Get_Help"
	Label:	"&How to Get Help..."
	Click:	"Project.HelpHelp"
	Shortcut:	"Keys.None"
)

(Space.918
)

(Choice.919
	Help:	"Provides information about ArcView"
	HelpTopic:	"About"
	Label:	"&About ArcView..."
	Click:	"Project.About"
	Shortcut:	"Keys.None"
)

(PMenu.920
	Label:	"ScrTools"
)

(ButnBar.943
	Update:	"Project.UpdateButtons"
	Child:	944
	Child:	946
	Child:	947
	Child:	949
	Child:	950
	Child:	954
	Child:	955
)

(Butn.944
	Help:	"Save Project//Saves the current project"
	HelpTopic:	"Save_Project"
	Icon:	945
	Click:	"Project.Save"
)

(AVIcon.945
	Name:	"Save"
	Res:	"Icons.Save"

)

(Space.946
)

(Butn.947
	Help:	"Help//Gets help about the next button, tool, or menu choice you click"
	HelpTopic:	"Help_button"
	Icon:	948
	Click:	"Help.Tool"
)

(AVIcon.948
	Name:	"HelpTool"
	Res:	"Icons.HelpTool"

)

(Space.949
)

(Butn.950
	Icon:	951
	Click:	"SED.Get"
)

(AVIcon.951
	Name:	"Find"
	Res:	"Icons.Find"

)

(Space.954
)

(Butn.955
	Icon:	956
	Click:	"SED.Get"
)

(AVIcon.956
	Name:	"Find"
	Res:	"Icons.Find"

)

(PopupSet.957
)

(ToolBar.958
)

(AVIcon.959
	Name:	"Icon"
	Res:	"Project.Icon"

)

(FN.978
	Path:	"$HOME"
)

(AVStr.979
	S:	"View"
)

(AVStr.980
	S:	"Table"
)

(AVStr.981
	S:	"Chart"
)

(AVStr.982
	S:	"Layout"
)

(AVStr.983
	S:	"Script"
)

(AVStr.984
	S:	"Project"
)

(AVStr.985
	S:	"Appl"
)

